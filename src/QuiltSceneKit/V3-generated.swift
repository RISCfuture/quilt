// Â© 2015 George King. Permission to use this file is granted in license-quilt.txt.
// This file is generated by gen/vec.py.

import Darwin
import simd
import SceneKit
import Quilt
import QuiltUI
extension V3 : VecType3, FloatVecType, Comparable, CustomStringConvertible {
  public typealias Scalar = Flt
  public typealias FloatType = Flt
  public typealias VSType = V3S
  public typealias VDType = V3D
  public typealias VU8Type = V3U8
  public init(_ v: V3S) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V3D) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V3I) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V3U8) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V4S) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V4D) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V4I) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V4U8) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z))
  }
  public init(_ v: V2, z: Scalar) {
    self.init(v.x, v.y, z)
  }
  public static let zero = V3(0, 0, 0)
  public static let unitX = V3(1, 0, 0)
  public static let unitY = V3(0, 1, 0)
  public static let unitZ = V3(0, 0, 1)
  public var description: String { return "V3(\(x), \(y), \(z))" }
  public var vs: V3S { return V3S(F32(x), F32(y), F32(z)) }
  public var vd: V3D { return V3D(F64(x), F64(y), F64(z)) }
  public var sqrLen: FloatType { return (FloatType(x).sqr + FloatType(y).sqr + FloatType(z).sqr) }
  public var aspect: FloatType { return FloatType(x) / FloatType(y) }
  public var r: Scalar {
    get { return x }
    set { x = newValue }
  }
  public var g: Scalar {
    get { return y }
    set { y = newValue }
  }
  public var b: Scalar {
    get { return z }
    set { z = newValue }
  }

  public var allNormal: Bool { return x.isNormal && y.isNormal && z.isNormal }
  public var allFinite: Bool { return x.isFinite && y.isFinite && z.isFinite }
  public var allZero: Bool { return x.isNormal && y.isNormal && z.isNormal }
  public var anySubnormal: Bool { return x.isSubnormal || y.isSubnormal || z.isSubnormal}
  public var anyInfite: Bool { return x.isInfinite || y.isInfinite || z.isInfinite}
  public var anyNaN: Bool { return x.isNaN || y.isNaN || z.isNaN}
  public var norm: V3 { return self / self.len }
  public var clampToUnit: V3 { return V3(clamp(x, min: 0, max: 1), clamp(y, min: 0, max: 1), clamp(z, min: 0, max: 1)) }
  public var toU8Pixel: VU8Type { return VU8Type(U8(clamp(x * 255, min: 0, max: 255)), U8(clamp(y * 255, min: 0, max: 255)), U8(clamp(z * 255, min: 0, max: 255))) }
  public var heading: Scalar { return atan2(y, x) }

  public func dot(_ b: V3) -> Scalar { return (x * b.x) + (y * b.y) + (z * b.z) }
  public func angle(_ b: V3) -> Scalar { return acos(self.dot(b) / (self.len * b.len)) }
  public func lerp(_ b: V3, _ t: Scalar) -> V3 { return self * (1 - t) + b * t }

  public func cross(_ b: V3) -> V3 { return V3(
  y * b.z - z * b.y,
  z * b.x - x * b.z,
  x * b.y - y * b.x
)}

}

public func <(a: V3, b: V3) -> Bool {
  if a.x != b.x { return a.x < b.x }
  if a.y != b.y { return a.y < b.y }
  return a.z < b.z
}

public func +(a: V3, b: V3) -> V3 { return V3(a.x + b.x, a.y + b.y, a.z + b.z) }
public func -(a: V3, b: V3) -> V3 { return V3(a.x - b.x, a.y - b.y, a.z - b.z) }
public func *(a: V3, b: V3) -> V3 { return V3(a.x * b.x, a.y * b.y, a.z * b.z) }
public func /(a: V3, b: V3) -> V3 { return V3(a.x / b.x, a.y / b.y, a.z / b.z) }
public func +(a: V3, s: Flt) -> V3 { return V3(a.x + s, a.y + s, a.z + s) }
public func -(a: V3, s: Flt) -> V3 { return V3(a.x - s, a.y - s, a.z - s) }
public func *(a: V3, s: Flt) -> V3 { return V3(a.x * s, a.y * s, a.z * s) }
public func /(a: V3, s: Flt) -> V3 { return V3(a.x / s, a.y / s, a.z / s) }
public prefix func -(a: V3) -> V3 { return a * -1 }

