// Â© 2015 George King. Permission to use this file is granted in license-quilt.txt.
// This file is generated by gen/vec.py.

import Darwin
import simd


extension SIMD4: VecType, VecType4 where Scalar: ArithmeticFloat {
  public typealias VSType = V4S
  public typealias VDType = V4D
  public typealias VU8Type = V4U8

  public init(_ v: V4S) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z), Scalar(v.w))
  }
  public init(_ v: V4D) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z), Scalar(v.w))
  }
  public init(_ v: V4I) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z), Scalar(v.w))
  }
  public init(_ v: V4U8) {
    self.init(Scalar(v.x), Scalar(v.y), Scalar(v.z), Scalar(v.w))
  }
  public init(_ v: SIMD3<Scalar>, w: Scalar) {
    self.init(v.x, v.y, v.z, w)
  }

  public static var scalarCount: Int { return 4 }

  public static var unitX: SIMD4<Scalar> { return SIMD4(1, 0, 0, 0) }
  public static var unitY: SIMD4<Scalar> { return SIMD4(0, 1, 0, 0) }
  public static var unitZ: SIMD4<Scalar> { return SIMD4(0, 0, 1, 0) }
  public static var unitW: SIMD4<Scalar> { return SIMD4(0, 0, 0, 1) }

  public var vs: V4S { return V4S(F32(x), F32(y), F32(z), F32(w)) }
  public var vd: V4D { return V4D(F64(x), F64(y), F64(z), F64(w)) }

  public var sqrLen: F64 {
    var s = F64(x.sqr)
    s += F64(y.sqr)
    s += F64(z.sqr)
    s += F64(w.sqr)
    return s }

  public var aspect: F64 { return F64(x) / F64(y) }

  public var r: Scalar {
    get { return x }
    set { x = newValue }
  }
  public var g: Scalar {
    get { return y }
    set { y = newValue }
  }
  public var b: Scalar {
    get { return z }
    set { z = newValue }
  }
  public var a: Scalar {
    get { return w }
    set { w = newValue }
  }
  public func dot(_ b: SIMD4<Scalar>) -> F64 {
    var s = F64(x * b.x)
    s += F64(y * b.y)
    s += F64(z * b.z)
    s += F64(w * b.w)
    return s }

  public var allNormal: Bool { return x.isNormal && (y.isNormal && (z.isNormal && (w.isNormal))) }
  public var allFinite: Bool { return x.isFinite && (y.isFinite && (z.isFinite && (w.isFinite))) }
  public var allZero: Bool { return x.isZero && (y.isZero && (z.isZero && (w.isZero))) }
  public var anySubnormal: Bool { return x.isSubnormal || (y.isSubnormal || (z.isSubnormal || (w.isSubnormal)))}
  public var anyInfite: Bool { return x.isInfinite || (y.isInfinite || (z.isInfinite || (w.isInfinite)))}
  public var anyNaN: Bool { return x.isNaN || (y.isNaN || (z.isNaN || (w.isNaN)))}
  public var clampToUnit: SIMD4 { return SIMD4(x.clamp(min: 0, max: 1), y.clamp(min: 0, max: 1), z.clamp(min: 0, max: 1), w.clamp(min: 0, max: 1)) }
  public var toU8Pixel: VU8Type { return VU8Type(U8((x*255).clamp(min: 0, max: 255)), U8((y*255).clamp(min: 0, max: 255)), U8((z*255).clamp(min: 0, max: 255)), U8((w*255).clamp(min: 0, max: 255))) }

  public func cross(_ b: SIMD4) -> SIMD4 { return SIMD4(
    y * b.z - z * b.y,
    z * b.x - x * b.z,
    x * b.y - y * b.x,
    0
  )}
}

