// Â© 2015 George King. Permission to use this file is granted in license-quilt.txt.
// This file is generated by gen/vec.py.

import Darwin
import simd
import CoreGraphics
import Quilt


extension CGVector: VecType, VecType2 {
  public typealias Scalar = Flt
  public typealias VSType = V2S
  public typealias VDType = V2D
  public typealias VU8Type = V2U8

  public init(_ v: V2S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }

  public static var scalarCount: Int { return 2 }

  public static var unitX: CGVector { return CGVector(1, 0) }
  public static var unitY: CGVector { return CGVector(0, 1) }

  public var vs: V2S { return V2S(x.asF32, y.asF32) }
  public var vd: V2D { return V2D(x.asF64, y.asF64) }

  public var sqrLen: F64 {
    var s = x.asF64.sqr
    s += y.asF64.sqr
    return s
}

  public var aspect: F64 { return x.asF64 / y.asF64 }

  public func dot(_ b: CGVector) -> F64 {
    var s = x.asF64 * b.x.asF64
    s += y.asF64 * b.y.asF64
    return s
  }

public static func +(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x + b.x, a.y + b.y) }
public static func -(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x - b.x, a.y - b.y) }
public static func *(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x * b.x, a.y * b.y) }
public static func /(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x / b.x, a.y / b.y) }
public static func +(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x + s, a.y + s) }
public static func -(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x - s, a.y - s) }
public static func *(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x * s, a.y * s) }
public static func /(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x / s, a.y / s) }
public static prefix func -(a: CGVector) -> CGVector { return a * -1 }
}


extension CGVector: FloatVecType {

  public var allNormal: Bool { return x.isNormal && (y.isNormal) }
  public var allFinite: Bool { return x.isFinite && (y.isFinite) }
  public var allZero: Bool { return x.isZero && (y.isZero) }
  public var anySubnormal: Bool { return x.isSubnormal || (y.isSubnormal)}
  public var anyInfite: Bool { return x.isInfinite || (y.isInfinite)}
  public var anyNaN: Bool { return x.isNaN || (y.isNaN)}
  public var clampToUnit: CGVector { return CGVector(x.clamp(min: 0, max: 1), y.clamp(min: 0, max: 1)) }
  public var clampToSignedUnit: CGVector { return CGVector(x.clamp(min: -1, max: 1), y.clamp(min: -1, max: 1)) }
  public var toU8Pixel: VU8Type { return VU8Type(U8((x*255).clamp(min: 0, max: 255)), U8((y*255).clamp(min: 0, max: 255))) }
}

extension CGVector: CustomStringConvertible {
  public var description: String { return "CGVector(\(x), \(y))" }
}

