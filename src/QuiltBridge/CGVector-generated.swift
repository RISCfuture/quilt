// Â© 2015 George King. Permission to use this file is granted in license-quilt.txt.
// This file is generated by gen/vec.py.
  
import Darwin
import simd

import CoreGraphics


import Quilt
extension CGVector : VecType2, FloatVecType, CustomStringConvertible, JsonArrayInitable {
  public typealias Scalar = Flt
  public typealias FloatType = Flt
  public typealias VSType = V2S
  public typealias VDType = V2D
  public typealias VU8Type = V2U8
  public init(_ v: V2S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V2U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V3U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4S) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4D) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4I) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(_ v: V4U8) {
    self.init(Scalar(v.x), Scalar(v.y))
  }
  public init(jsonArray: JsonArray) throws {
    if jsonArray.count > 2 {
      throw Json.Err.excessEl(index: 2, exp: CGVector.self, json: jsonArray.raw)
    }
    self.init(try jsonArray.el(0).conv() as Flt, try jsonArray.el(1).conv() as Flt)
  }

  public static let unitX = CGVector(1, 0)
  public static let unitY = CGVector(0, 1)
  public var description: String { return "CGVector(\(x), \(y))" }
  public var vs: V2S { return V2S(F32(x), F32(y)) }
  public var vd: V2D { return V2D(F64(x), F64(y)) }
  public var sqrLen: FloatType { return (FloatType(x).sqr + FloatType(y).sqr) }
  public var aspect: FloatType { return FloatType(x) / FloatType(y) }
  public var l: Scalar {
    get { return x }
    set { x = newValue }
  }
  public var a: Scalar {
    get { return y }
    set { y = newValue }
  }

  public var allNormal: Bool { return x.isNormal && y.isNormal }
  public var allFinite: Bool { return x.isFinite && y.isFinite }
  public var allZero: Bool { return x.isNormal && y.isNormal }
  public var anySubnormal: Bool { return x.isSubnormal || y.isSubnormal}
  public var anyInfite: Bool { return x.isInfinite || y.isInfinite}
  public var anyNaN: Bool { return x.isNaN || y.isNaN}
  public var norm: CGVector { return self / self.len }
  public var clampToUnit: CGVector { return CGVector(clamp(x, min: 0, max: 1), clamp(y, min: 0, max: 1)) }
  public var toU8Pixel: VU8Type { return VU8Type(U8(clamp(x * 255, min: 0, max: 255)), U8(clamp(y * 255, min: 0, max: 255))) }
  public var heading: Scalar { return atan2(y, x) }

  public func dot(_ b: CGVector) -> Scalar { return (x * b.x) + (y * b.y) }
  public func angle(_ b: CGVector) -> Scalar { return acos(self.dot(b) / (self.len * b.len)) }
  public func lerp(_ b: CGVector, _ t: Scalar) -> CGVector { return self * (1 - t) + b * t }

}

public func +(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x + b.x, a.y + b.y) }
public func -(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x - b.x, a.y - b.y) }
public func *(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x * b.x, a.y * b.y) }
public func /(a: CGVector, b: CGVector) -> CGVector { return CGVector(a.x / b.x, a.y / b.y) }
public func +(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x + s, a.y + s) }
public func -(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x - s, a.y - s) }
public func *(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x * s, a.y * s) }
public func /(a: CGVector, s: Flt) -> CGVector { return CGVector(a.x / s, a.y / s) }
public prefix func -(a: CGVector) -> CGVector { return a * -1 }

